-- Test primary key ordering
CREATE TABLE pk_asc(k int, v int, PRIMARY KEY(k ASC));
INSERT INTO pk_asc VALUES (20, 2),(30, 3),(10, 1);
SELECT * FROM pk_asc;
 k  | v
----+---
 10 | 1
 20 | 2
 30 | 3
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_asc ORDER BY k;
               QUERY PLAN
----------------------------------------
 Index Scan using pk_asc_pkey on pk_asc
(1 row)

SELECT * FROM pk_asc ORDER BY k;
 k  | v
----+---
 10 | 1
 20 | 2
 30 | 3
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_asc ORDER BY k DESC;
                   QUERY PLAN
-------------------------------------------------
 Index Scan Backward using pk_asc_pkey on pk_asc
(1 row)

SELECT * FROM pk_asc ORDER BY k DESC;
 k  | v
----+---
 30 | 3
 20 | 2
 10 | 1
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_asc ORDER BY k NULLS FIRST;
        QUERY PLAN
---------------------------
 Sort
   Sort Key: k NULLS FIRST
   ->  Seq Scan on pk_asc
(3 rows)

SELECT * FROM pk_asc ORDER BY k NULLS FIRST;
 k  | v
----+---
 10 | 1
 20 | 2
 30 | 3
(3 rows)

CREATE TABLE pk_desc(k int, v int, PRIMARY KEY(k DESC NULLS LAST));
INSERT INTO pk_desc VALUES (20, 12),(30, 13),(10, 11);
SELECT * FROM pk_desc;
 k  | v
----+----
 30 | 13
 20 | 12
 10 | 11
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_desc ORDER BY k;
        QUERY PLAN
---------------------------
 Sort
   Sort Key: k
   ->  Seq Scan on pk_desc
(3 rows)

SELECT * FROM pk_desc ORDER BY k;
 k  | v
----+----
 10 | 11
 20 | 12
 30 | 13
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_desc ORDER BY k DESC;
        QUERY PLAN
---------------------------
 Sort
   Sort Key: k DESC
   ->  Seq Scan on pk_desc
(3 rows)

SELECT * FROM pk_desc ORDER BY k DESC;
 k  | v
----+----
 30 | 13
 20 | 12
 10 | 11
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_desc ORDER BY k NULLS FIRST;
                    QUERY PLAN
---------------------------------------------------
 Index Scan Backward using pk_desc_pkey on pk_desc
(1 row)

SELECT * FROM pk_desc ORDER BY k NULLS FIRST;
 k  | v
----+----
 10 | 11
 20 | 12
 30 | 13
(3 rows)

CREATE TABLE  pk_multi(h int, r int, v text, PRIMARY KEY(h, r DESC));
INSERT INTO pk_multi(h, r, v) VALUES (1, 0, '1-0'),(1, 1, '1-1'),(1, 2, '1-2'),(1, 3, '1-3');
EXPLAIN (COSTS OFF) SELECT * FROM pk_multi WHERE h = 1;
                 QUERY PLAN
--------------------------------------------
 Index Scan using pk_multi_pkey on pk_multi
   Index Cond: (h = 1)
(2 rows)

SELECT * FROM pk_multi WHERE h = 1;
 h | r |  v
---+---+-----
 1 | 3 | 1-3
 1 | 2 | 1-2
 1 | 1 | 1-1
 1 | 0 | 1-0
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM pk_multi WHERE yb_hash_code(h) = yb_hash_code(1);
                 QUERY PLAN
--------------------------------------------
 Index Scan using pk_multi_pkey on pk_multi
   Index Cond: (yb_hash_code(h) = 4624)
(2 rows)

SELECT * FROM pk_multi WHERE yb_hash_code(h) = yb_hash_code(1);
 h | r |  v
---+---+-----
 1 | 3 | 1-3
 1 | 2 | 1-2
 1 | 1 | 1-1
 1 | 0 | 1-0
(4 rows)

-- Test unique secondary index ordering
CREATE TABLE usc_asc(k int, v int);
CREATE UNIQUE INDEX ON usc_asc(v ASC NULLS FIRST);
INSERT INTO usc_asc VALUES (44, NULL),(22, 20),(33, 30),(11, 10),(44, NULL);
EXPLAIN (COSTS OFF) SELECT * FROM usc_asc ORDER BY v;
        QUERY PLAN
---------------------------
 Sort
   Sort Key: v
   ->  Seq Scan on usc_asc
(3 rows)

SELECT * FROM usc_asc ORDER BY v;
 k  | v
----+----
 11 | 10
 22 | 20
 33 | 30
 44 |
 44 |
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM usc_asc ORDER BY v DESC NULLS LAST;
                     QUERY PLAN
----------------------------------------------------
 Index Scan Backward using usc_asc_v_idx on usc_asc
(1 row)

SELECT * FROM usc_asc ORDER BY v DESC NULLS LAST;
 k  | v
----+----
 33 | 30
 22 | 20
 11 | 10
 44 |
 44 |
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM usc_asc ORDER BY v NULLS FIRST;
                QUERY PLAN
-------------------------------------------
 Index Scan using usc_asc_v_idx on usc_asc
(1 row)

SELECT * FROM usc_asc ORDER BY v NULLS FIRST;
 k  | v
----+----
 44 |
 44 |
 11 | 10
 22 | 20
 33 | 30
(5 rows)

CREATE TABLE usc_multi_asc(k int, r int, v int);
CREATE INDEX ON usc_multi_asc(k, r ASC NULLS FIRST);
INSERT INTO usc_multi_asc(k, r, v) VALUES (1, 10, 1),(1, NULL, 2),(1, 20, 3);
EXPLAIN (COSTS OFF) SELECT * FROM usc_multi_asc WHERE k = 1;
                       QUERY PLAN
---------------------------------------------------------
 Index Scan using usc_multi_asc_k_r_idx on usc_multi_asc
   Index Cond: (k = 1)
(2 rows)

SELECT * FROM usc_multi_asc WHERE k = 1;
 k | r  | v
---+----+---
 1 |    | 2
 1 | 10 | 1
 1 | 20 | 3
(3 rows)

-- Test non-unique secondary index ordering
CREATE TABLE sc_desc(k int, v int);
CREATE INDEX ON sc_desc(v DESC NULLS LAST);
INSERT INTO sc_desc VALUES (4, NULL),(2, 20),(3, 30),(1, 10),(4, NULL);
EXPLAIN (COSTS OFF) SELECT * FROM sc_desc ORDER BY v;
        QUERY PLAN
---------------------------
 Sort
   Sort Key: v
   ->  Seq Scan on sc_desc
(3 rows)

SELECT * FROM sc_desc ORDER BY v;
 k | v
---+----
 1 | 10
 2 | 20
 3 | 30
 4 |
 4 |
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM sc_desc ORDER BY v DESC NULLS LAST;
                QUERY PLAN
-------------------------------------------
 Index Scan using sc_desc_v_idx on sc_desc
(1 row)

SELECT * FROM sc_desc ORDER BY v DESC NULLS LAST;
 k | v
---+----
 3 | 30
 2 | 20
 1 | 10
 4 |
 4 |
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM sc_desc ORDER BY v NULLS FIRST;
                     QUERY PLAN
----------------------------------------------------
 Index Scan Backward using sc_desc_v_idx on sc_desc
(1 row)

SELECT * FROM sc_desc ORDER BY v NULLS FIRST;
 k | v
---+----
 4 |
 4 |
 1 | 10
 2 | 20
 3 | 30
(5 rows)

CREATE TABLE sc_multi_desc(k int, r int, v int);
CREATE INDEX ON sc_multi_desc(k, r DESC);
INSERT INTO sc_multi_desc(k, r, v) VALUES (1, 10, 10),(1, 10, 10),(1, NULL, 2),(1, 20, 3);
EXPLAIN (COSTS OFF) SELECT * FROM sc_multi_desc WHERE k = 1;
                       QUERY PLAN
---------------------------------------------------------
 Index Scan using sc_multi_desc_k_r_idx on sc_multi_desc
   Index Cond: (k = 1)
(2 rows)

SELECT * FROM sc_multi_desc WHERE k = 1;
 k | r  | v
---+----+----
 1 |    |  2
 1 | 20 |  3
 1 | 10 | 10
 1 | 10 | 10
(4 rows)

-- Test NULLS last ordering.
CREATE TABLE sc_desc_nl(h int, r int, v int);
CREATE INDEX on sc_desc_nl(h HASH, r DESC NULLS LAST);
INSERT INTO sc_desc_nl(h,r,v) values (1,1,1), (1,2,2), (1,3,3), (1,4,4), (1,5,5), (1, null, 6);
-- Rows should be ordered DESC NULLS LAST by r.
SELECT * FROM sc_desc_nl WHERE h = 1;
 h | r | v
---+---+---
 1 | 5 | 5
 1 | 4 | 4
 1 | 3 | 3
 1 | 2 | 2
 1 | 1 | 1
 1 |   | 6
(6 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1);
 h | r | v
---+---+---
 1 | 5 | 5
 1 | 4 | 4
 1 | 3 | 3
 1 | 2 | 2
 1 | 1 | 1
 1 |   | 6
(6 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r >= 2;
 h | r | v
---+---+---
 1 | 5 | 5
 1 | 4 | 4
 1 | 3 | 3
 1 | 2 | 2
(4 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r >= 2;
 h | r | v
---+---+---
 1 | 5 | 5
 1 | 4 | 4
 1 | 3 | 3
 1 | 2 | 2
(4 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r < 4;
 h | r | v
---+---+---
 1 | 3 | 3
 1 | 2 | 2
 1 | 1 | 1
(3 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r < 4;
 h | r | v
---+---+---
 1 | 3 | 3
 1 | 2 | 2
 1 | 1 | 1
(3 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r > 1 AND r <= 4;
 h | r | v
---+---+---
 1 | 4 | 4
 1 | 3 | 3
 1 | 2 | 2
(3 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r > 1 AND r <= 4;
 h | r | v
---+---+---
 1 | 4 | 4
 1 | 3 | 3
 1 | 2 | 2
(3 rows)

-- <value> >/>=/=/<=/< null is never true per SQL semantics.
SELECT * FROM sc_desc_nl WHERE h = 1 AND r = null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r = null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r >= null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r >= null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r > null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r > null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r <= null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r <= null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE h = 1 AND r < null;
 h | r | v
---+---+---
(0 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r < null;
 h | r | v
---+---+---
(0 rows)

-- IS NULL should be pushed down and return the expected result.
SELECT * FROM sc_desc_nl WHERE h = 1 AND r IS null;
 h | r | v
---+---+---
 1 |   | 6
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM sc_desc_nl WHERE h = 1 AND r IS null;
                    QUERY PLAN
---------------------------------------------------
 Index Scan using sc_desc_nl_h_r_idx on sc_desc_nl
   Index Cond: ((h = 1) AND (r IS NULL))
(2 rows)

SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r IS null;
 h | r | v
---+---+---
 1 |   | 6
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM sc_desc_nl WHERE yb_hash_code(h) = yb_hash_code(1) AND r IS null;
                        QUERY PLAN
----------------------------------------------------------
 Index Scan using sc_desc_nl_h_r_idx on sc_desc_nl
   Index Cond: ((yb_hash_code(h) = 4624) AND (r IS NULL))
(2 rows)

DROP TABLE sc_desc_nl;
--
-- Test complex systable scans.
--
-- Existing db oid (template1).
SELECT * FROM pg_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 1);
  datname  | datdba | encoding | datcollate |  datctype   | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace |               datacl
-----------+--------+----------+------------+-------------+---------------+--------------+--------------+---------------+--------------+------------+---------------+-------------------------------------
 template1 |     10 |        6 | C          | en_US.UTF-8 | t             | t            |           -1 |             0 |            0 |          1 |          1663 | {=c/postgres,postgres=CTc/postgres}
(1 row)

SELECT * FROM pg_database WHERE datname IN (SELECT datname FROM pg_database WHERE oid = 1);
  datname  | datdba | encoding | datcollate |  datctype   | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace |               datacl
-----------+--------+----------+------------+-------------+---------------+--------------+--------------+---------------+--------------+------------+---------------+-------------------------------------
 template1 |     10 |        6 | C          | en_US.UTF-8 | t             | t            |           -1 |             0 |            0 |          1 |          1663 | {=c/postgres,postgres=CTc/postgres}
(1 row)

-- Invalid (non-existing) db.
SELECT * FROM pg_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 0);
 datname | datdba | encoding | datcollate | datctype | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace | datacl
---------+--------+----------+------------+----------+---------------+--------------+--------------+---------------+--------------+------------+---------------+--------
(0 rows)

SELECT * FROM pg_database WHERE datname IN (SELECT datname FROM pg_database WHERE oid = 0);
 datname | datdba | encoding | datcollate | datctype | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace | datacl
---------+--------+----------+------------+----------+---------------+--------------+--------------+---------------+--------------+------------+---------------+--------
(0 rows)

-- This is a query done by the pg_admin dashboard, testing compatiblity here.
-- Existing db oid (template1).
SELECT 'session_stats' AS chart_name, row_to_json(t) AS chart_data
FROM (SELECT
   (SELECT count(*) FROM pg_stat_activity WHERE datname = (SELECT datname FROM pg_database WHERE oid = 1)) AS "Total",
   (SELECT count(*) FROM pg_stat_activity WHERE state = 'active' AND datname = (SELECT datname FROM pg_database WHERE oid = 1))  AS "Active",
   (SELECT count(*) FROM pg_stat_activity WHERE state = 'idle' AND datname = (SELECT datname FROM pg_database WHERE oid = 1))  AS "Idle"
) t
UNION ALL
SELECT 'tps_stats' AS chart_name, row_to_json(t) AS chart_data
FROM (SELECT
   (SELECT sum(xact_commit) + sum(xact_rollback) FROM pg_stat_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 1)) AS "Transactions",
   (SELECT sum(xact_commit) FROM pg_stat_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 1)) AS "Commits",
   (SELECT sum(xact_rollback) FROM pg_stat_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 1)) AS "Rollbacks"
) t;
  chart_name   |                  chart_data
---------------+----------------------------------------------
 session_stats | {"Total":0,"Active":0,"Idle":0}
 tps_stats     | {"Transactions":0,"Commits":0,"Rollbacks":0}
(2 rows)

-- Invalid (non-existing) db.
SELECT 'session_stats' AS chart_name, row_to_json(t) AS chart_data
FROM (SELECT
   (SELECT count(*) FROM pg_stat_activity WHERE datname = (SELECT datname FROM pg_database WHERE oid = 0)) AS "Total",
   (SELECT count(*) FROM pg_stat_activity WHERE state = 'active' AND datname = (SELECT datname FROM pg_database WHERE oid = 0))  AS "Active",
   (SELECT count(*) FROM pg_stat_activity WHERE state = 'idle' AND datname = (SELECT datname FROM pg_database WHERE oid = 0))  AS "Idle"
) t
UNION ALL
SELECT 'tps_stats' AS chart_name, row_to_json(t) AS chart_data
FROM (SELECT
   (SELECT sum(xact_commit) + sum(xact_rollback) FROM pg_stat_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 0)) AS "Transactions",
   (SELECT sum(xact_commit) FROM pg_stat_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 0)) AS "Commits",
   (SELECT sum(xact_rollback) FROM pg_stat_database WHERE datname = (SELECT datname FROM pg_database WHERE oid = 0)) AS "Rollbacks"
) t;
  chart_name   |                      chart_data
---------------+-------------------------------------------------------
 session_stats | {"Total":0,"Active":0,"Idle":0}
 tps_stats     | {"Transactions":null,"Commits":null,"Rollbacks":null}
(2 rows)

-- Test NULL returned by function.
-- Mark the function as stable to ensure pushdown.
CREATE OR REPLACE FUNCTION test_null_pushdown()
RETURNS Name AS $$
BEGIN
return null;
END;
$$ LANGUAGE plpgsql STABLE;
-- Expect pushdown in all cases.
EXPLAIN SELECT * FROM pg_database WHERE datname = test_null_pushdown();
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Index Scan using pg_database_datname_index on pg_database  (cost=0.00..4.37 rows=1 width=254)
   Index Cond: (datname = test_null_pushdown())
(2 rows)

EXPLAIN SELECT * FROM pg_database WHERE datname IN (test_null_pushdown());
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Index Scan using pg_database_datname_index on pg_database  (cost=0.00..4.37 rows=1 width=254)
   Index Cond: (datname = test_null_pushdown())
(2 rows)

EXPLAIN SELECT * FROM pg_database WHERE datname IN ('template1', test_null_pushdown(), 'template0');
                                            QUERY PLAN
---------------------------------------------------------------------------------------------------
 Index Scan using pg_database_datname_index on pg_database  (cost=0.00..4.37 rows=1 width=254)
   Index Cond: (datname = ANY (ARRAY['template1'::name, test_null_pushdown(), 'template0'::name]))
(2 rows)

-- Test execution.
SELECT * FROM pg_database WHERE datname = test_null_pushdown();
 datname | datdba | encoding | datcollate | datctype | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace | datacl
---------+--------+----------+------------+----------+---------------+--------------+--------------+---------------+--------------+------------+---------------+--------
(0 rows)

SELECT * FROM pg_database WHERE datname IN (test_null_pushdown());
 datname | datdba | encoding | datcollate | datctype | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace | datacl
---------+--------+----------+------------+----------+---------------+--------------+--------------+---------------+--------------+------------+---------------+--------
(0 rows)

-- Test null mixed with valid (existing) options.
SELECT * FROM pg_database WHERE datname IN ('template1', test_null_pushdown(), 'template0');
  datname  | datdba | encoding | datcollate |  datctype   | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace |               datacl
-----------+--------+----------+------------+-------------+---------------+--------------+--------------+---------------+--------------+------------+---------------+-------------------------------------
 template0 |     10 |        6 | C          | en_US.UTF-8 | t             | f            |           -1 |             0 |            0 |          1 |          1663 | {=c/postgres,postgres=CTc/postgres}
 template1 |     10 |        6 | C          | en_US.UTF-8 | t             | t            |           -1 |             0 |            0 |          1 |          1663 | {=c/postgres,postgres=CTc/postgres}
(2 rows)

-- Test null(s) mixed with invalid (existing) options.
SELECT * FROM pg_database WHERE datname IN ('non_existing_db1', test_null_pushdown(), 'non_existing_db2', test_null_pushdown());
 datname | datdba | encoding | datcollate | datctype | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace | datacl
---------+--------+----------+------------+----------+---------------+--------------+--------------+---------------+--------------+------------+---------------+--------
(0 rows)

--------------------------------------
-- Testing Selective Updation of Indices
--------------------------------------
-- create table with lot of columns
create table test (pk int primary key, col2 int, col3 int, col4 int, col5 int,
col6 int, col7 name, col8 int, col9 int);
insert into test values(1,1,1,1,1,1,'Aa',1,99);
insert into test values(2,2,2,2,2,2,'Bb',2,99);
insert into test values(3,3,3,3,3,3,'Cc',3,99);
insert into test values(4,4,4,4,4,4,'Dd',4,99);
insert into test values(5,5,5,5,5,5,'Ee',5,88);
insert into test values(6,6,6,6,6,6,'Ff',6,88);
-- Creating indices with included columns
create index idx_col3 on test(col3) include (col4,col5,col6);
create index idx_col5 on test(col5) include (col6,col7);
-- Ordering is disallowed for included columns
create index on test(col5) include (col6 hash, col7);
ERROR:  including column does not support ASC/DESC/HASH options
-- Performing a few updates and checking if subsequent commands exhibit expected behavior
update test set col3=11, col4=11 where pk=1;
select * from test;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  5 |    5 |    5 |    5 |    5 |    5 | Ee   |    5 |   88
  1 |    1 |   11 |   11 |    1 |    1 | Aa   |    1 |   99
  6 |    6 |    6 |    6 |    6 |    6 | Ff   |    6 |   88
  4 |    4 |    4 |    4 |    4 |    4 | Dd   |    4 |   99
  2 |    2 |    2 |    2 |    2 |    2 | Bb   |    2 |   99
  3 |    3 |    3 |    3 |    3 |    3 | Cc   |    3 |   99
(6 rows)

-- testing partial index on where clause
create index idx_col9 on test(col9) where col9 = 88;
update test set col9=199 where pk=2;
update test set col9=199 where pk=5;
select * from test;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  5 |    5 |    5 |    5 |    5 |    5 | Ee   |    5 |  199
  1 |    1 |   11 |   11 |    1 |    1 | Aa   |    1 |   99
  6 |    6 |    6 |    6 |    6 |    6 | Ff   |    6 |   88
  4 |    4 |    4 |    4 |    4 |    4 | Dd   |    4 |   99
  2 |    2 |    2 |    2 |    2 |    2 | Bb   |    2 |  199
  3 |    3 |    3 |    3 |    3 |    3 | Cc   |    3 |   99
(6 rows)

explain select * from test where col9 = 88;
                                QUERY PLAN
---------------------------------------------------------------------------
 Index Scan using idx_col9 on test  (cost=0.00..102.00 rows=1000 width=96)
(1 row)

explain select * from test where col9 = 99;
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on test  (cost=0.00..102.50 rows=1000 width=96)
   Filter: (col9 = 99)
(2 rows)

select * from test where col9 = 88;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  6 |    6 |    6 |    6 |    6 |    6 | Ff   |    6 |   88
(1 row)

select * from test where col9 = 99;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  1 |    1 |   11 |   11 |    1 |    1 | Aa   |    1 |   99
  4 |    4 |    4 |    4 |    4 |    4 | Dd   |    4 |   99
  3 |    3 |    3 |    3 |    3 |    3 | Cc   |    3 |   99
(3 rows)

-- testing index on expressions
create index idx_col7 ON test(col7);
explain select * from test where col7 = 'Dd';
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using idx_col7 on test  (cost=0.00..5.22 rows=10 width=96)
   Index Cond: (col7 = 'Dd'::name)
(2 rows)

explain select * from test where lower(col7) = 'dd';
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on test  (cost=0.00..107.50 rows=1000 width=96)
   Filter: (lower((col7)::text) = 'dd'::text)
(2 rows)

select * from test where col7 = 'Dd';
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  4 |    4 |    4 |    4 |    4 |    4 | Dd   |    4 |   99
(1 row)

drop index idx_col7;
create index idx_col7 ON test(lower(col7));
update test set col7='DdD' where pk=4;
explain select * from test where lower(col7) = lower('DdD');
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using idx_col7 on test  (cost=0.00..5.27 rows=10 width=96)
   Index Cond: (lower((col7)::text) = 'ddd'::text)
(2 rows)

select * from test;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  5 |    5 |    5 |    5 |    5 |    5 | Ee   |    5 |  199
  1 |    1 |   11 |   11 |    1 |    1 | Aa   |    1 |   99
  6 |    6 |    6 |    6 |    6 |    6 | Ff   |    6 |   88
  4 |    4 |    4 |    4 |    4 |    4 | DdD  |    4 |   99
  2 |    2 |    2 |    2 |    2 |    2 | Bb   |    2 |  199
  3 |    3 |    3 |    3 |    3 |    3 | Cc   |    3 |   99
(6 rows)

select * from test where lower(col7) = lower('DdD');
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  4 |    4 |    4 |    4 |    4 |    4 | DdD  |    4 |   99
(1 row)

-- testing multi-column indices
create index idx_col4_idx_col5_idx_col6 on test(col4, col5, col6);
update test set col4=112 where pk=1;
EXPLAIN SELECT * FROM test WHERE col4 = 112;
                                        QUERY PLAN
-------------------------------------------------------------------------------------------
 Index Scan using idx_col4_idx_col5_idx_col6 on test  (cost=0.00..16.25 rows=100 width=96)
   Index Cond: (col4 = 112)
(2 rows)

SELECT * FROM test WHERE col4 = 112;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  1 |    1 |   11 |  112 |    1 |    1 | Aa   |    1 |   99
(1 row)

update test set col4=222, col5=223 where pk=2;
EXPLAIN SELECT * FROM test WHERE col4 = 222 and col5 = 223;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using idx_col5 on test  (cost=0.00..5.28 rows=10 width=96)
   Index Cond: (col5 = 223)
   Filter: (col4 = 222)
(3 rows)

SELECT * FROM test WHERE col4 = 222 and col5 = 223;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  2 |    2 |    2 |  222 |  223 |    2 | Bb   |    2 |  199
(1 row)

update test set col4=232, col5=345, col6=456 where pk=3;
EXPLAIN SELECT * FROM test WHERE col4 = 232 and col5 = 345 and col6 = 456;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Index Scan using idx_col4_idx_col5_idx_col6 on test  (cost=0.00..5.27 rows=10 width=96)
   Index Cond: ((col4 = 232) AND (col5 = 345) AND (col6 = 456))
(2 rows)

SELECT * FROM test WHERE col4 = 232 and col5 = 345 and col6 = 456;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  3 |    3 |    3 |  232 |  345 |  456 | Cc   |    3 |   99
(1 row)

EXPLAIN SELECT * FROM test WHERE col5 = 345;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using idx_col5 on test  (cost=0.00..5.22 rows=10 width=96)
   Index Cond: (col5 = 345)
(2 rows)

SELECT * FROM test WHERE col5 = 345;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  3 |    3 |    3 |  232 |  345 |  456 | Cc   |    3 |   99
(1 row)

update test set col5=444, col6=35 where pk=4;
EXPLAIN SELECT * FROM test WHERE col5 = 444 and col6 = 35;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using idx_col5 on test  (cost=0.00..5.28 rows=10 width=96)
   Index Cond: (col5 = 444)
   Filter: (col6 = 35)
(3 rows)

SELECT * FROM test WHERE col5 = 444 and col6 = 35;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  4 |    4 |    4 |    4 |  444 |   35 | DdD  |    4 |   99
(1 row)

update test set col6=5554 where pk=5;
EXPLAIN SELECT * FROM test WHERE col6 = 5554;
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on test  (cost=0.00..102.50 rows=1000 width=96)
   Filter: (col6 = 5554)
(2 rows)

SELECT * FROM test WHERE col6 = 5554;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  5 |    5 |    5 |    5 |    5 | 5554 | Ee   |    5 |  199
(1 row)

-- test index only scan with non-target column refs in qual (github issue #9176)
-- baseline, col5 is in target columns
EXPLAIN SELECT col4, col5 FROM test WHERE col4 = 232 and col5 % 3 = 0;
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Index Only Scan using idx_col4_idx_col5_idx_col6 on test  (cost=0.00..16.25 rows=100 width=8)
   Index Cond: (col4 = 232)
   Filter: ((col5 % 3) = 0)
(3 rows)

SELECT col4, col5 FROM test WHERE col4 = 232 and col5 % 3 = 0;
 col4 | col5
------+------
  232 |  345
(1 row)

-- same lines are expected without col5 in the target list
EXPLAIN SELECT col4 FROM test WHERE col4 = 232 and col5 % 3 = 0;
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Index Only Scan using idx_col4_idx_col5_idx_col6 on test  (cost=0.00..16.25 rows=100 width=4)
   Index Cond: (col4 = 232)
   Filter: ((col5 % 3) = 0)
(3 rows)

SELECT col4 FROM test WHERE col4 = 232 and col5 % 3 = 0;
 col4
------
  232
(1 row)

-- test index scans where the filter trivially rejects everything and
-- no request should be sent to DocDB
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test WHERE col3 = ANY('{}');
                        QUERY PLAN
-----------------------------------------------------------
 Index Scan using idx_col3 on test (actual rows=0 loops=1)
   Index Cond: (col3 = ANY ('{}'::integer[]))
(2 rows)

SELECT * FROM test WHERE col3 = ANY('{}');
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
(0 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test WHERE col3 = ANY('{NULL}');
                        QUERY PLAN
-----------------------------------------------------------
 Index Scan using idx_col3 on test (actual rows=0 loops=1)
   Index Cond: (col3 = ANY ('{NULL}'::integer[]))
(2 rows)

SELECT * FROM test WHERE col3 = ANY('{NULL}');
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
(0 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT col3 FROM test WHERE col3 = ANY('{NULL}');
                           QUERY PLAN
----------------------------------------------------------------
 Index Only Scan using idx_col3 on test (actual rows=0 loops=1)
   Index Cond: (col3 = ANY ('{NULL}'::integer[]))
   Heap Fetches: 0
(3 rows)

SELECT col3 FROM test WHERE col3 = ANY('{NULL}');
 col3
------
(0 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test WHERE col3 = ANY('{NULL, NULL}');
                        QUERY PLAN
-----------------------------------------------------------
 Index Scan using idx_col3 on test (actual rows=0 loops=1)
   Index Cond: (col3 = ANY ('{NULL,NULL}'::integer[]))
(2 rows)

SELECT * FROM test WHERE col3 = ANY('{NULL, NULL}');
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
(0 rows)

-- testing update on primary key
update test set pk=17 where pk=1;
update test set pk=25, col4=777 where pk=2;
select * from test;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
  5 |    5 |    5 |    5 |    5 | 5554 | Ee   |    5 |  199
  6 |    6 |    6 |    6 |    6 |    6 | Ff   |    6 |   88
 17 |    1 |   11 |  112 |    1 |    1 | Aa   |    1 |   99
  4 |    4 |    4 |    4 |  444 |   35 | DdD  |    4 |   99
  3 |    3 |    3 |  232 |  345 |  456 | Cc   |    3 |   99
 25 |    2 |    2 |  777 |  223 |    2 | Bb   |    2 |  199
(6 rows)

explain select * from test where pk=17;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using test_pkey on test  (cost=0.00..4.11 rows=1 width=96)
   Index Cond: (pk = 17)
(2 rows)

select * from test where pk=17;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
 17 |    1 |   11 |  112 |    1 |    1 | Aa   |    1 |   99
(1 row)

explain select * from test where pk=25;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using test_pkey on test  (cost=0.00..4.11 rows=1 width=96)
   Index Cond: (pk = 25)
(2 rows)

select * from test where pk=25;
 pk | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9
----+------+------+------+------+------+------+------+------
 25 |    2 |    2 |  777 |  223 |    2 | Bb   |    2 |  199
(1 row)

-- test index scan where the column type does not match value type
CREATE TABLE pk_real(c0 REAL, PRIMARY KEY(c0 asc));
INSERT INTO pk_real(c0) VALUES(0.4);
EXPLAIN SELECT ALL pk_real.c0 FROM pk_real WHERE ((0.6)>(pk_real.c0));
                                 QUERY PLAN
----------------------------------------------------------------------------
 Index Scan using pk_real_pkey on pk_real  (cost=0.00..4.11 rows=1 width=4)
   Index Cond: ('0.6'::double precision > c0)
(2 rows)

SELECT ALL pk_real.c0 FROM pk_real WHERE ((0.6)>(pk_real.c0));
 c0
-----
 0.4
(1 row)

EXPLAIN SELECT ALL pk_real.c0 FROM pk_real WHERE pk_real.c0 = ANY(ARRAY[0.6, 0.4]);
                                 QUERY PLAN
----------------------------------------------------------------------------
 Index Scan using pk_real_pkey on pk_real  (cost=0.00..4.11 rows=1 width=4)
   Index Cond: (c0 = ANY ('{0.6,0.4}'::double precision[]))
(2 rows)

-- 0.4::FLOAT4 is not equal to 0.4::DOUBLE PRECISION
SELECT ALL pk_real.c0 FROM pk_real WHERE pk_real.c0 = ANY(ARRAY[0.6, 0.4]);
 c0
----
(0 rows)

INSERT INTO pk_real(c0) VALUES(0.5);
EXPLAIN SELECT ALL pk_real.c0 FROM pk_real WHERE pk_real.c0 = 0.5;
                                 QUERY PLAN
----------------------------------------------------------------------------
 Index Scan using pk_real_pkey on pk_real  (cost=0.00..4.11 rows=1 width=4)
   Index Cond: (c0 = '0.5'::double precision)
(2 rows)

-- 0.5::FLOAT4 is equal to 0.5::DOUBLE PRECISION
SELECT ALL pk_real.c0 FROM pk_real WHERE pk_real.c0 = 0.5;
 c0
-----
 0.5
(1 row)

CREATE TABLE pk_smallint(c0 SMALLINT, PRIMARY KEY(c0 asc));
INSERT INTO pk_smallint VALUES(123), (-123);
EXPLAIN SELECT c0 FROM pk_smallint WHERE (65568 > c0);
                                     QUERY PLAN
------------------------------------------------------------------------------------
 Index Scan using pk_smallint_pkey on pk_smallint  (cost=0.00..4.11 rows=1 width=2)
   Index Cond: (65568 > c0)
(2 rows)

SELECT c0 FROM pk_smallint WHERE (65568 > c0);
  c0
------
 -123
  123
(2 rows)

EXPLAIN SELECT c0 FROM pk_smallint WHERE (c0 > -65539);
                                     QUERY PLAN
------------------------------------------------------------------------------------
 Index Scan using pk_smallint_pkey on pk_smallint  (cost=0.00..4.11 rows=1 width=2)
   Index Cond: (c0 > '-65539'::integer)
(2 rows)

SELECT c0 FROM pk_smallint WHERE (c0 > -65539);
  c0
------
 -123
  123
(2 rows)

EXPLAIN SELECT c0 FROM pk_smallint WHERE (c0 = ANY(ARRAY[-65539, 65568]));
                                     QUERY PLAN
------------------------------------------------------------------------------------
 Index Scan using pk_smallint_pkey on pk_smallint  (cost=0.00..4.11 rows=1 width=2)
   Index Cond: (c0 = ANY ('{-65539,65568}'::integer[]))
(2 rows)

SELECT c0 FROM pk_smallint WHERE (c0 = ANY(ARRAY[-65539, 65568]));
 c0
----
(0 rows)

-- test any/some/all
create TABLE pk_int(c0 int, primary key(c0 ASC));
INSERT INTO pk_int VALUES (1), (2), (3), (4);
SELECT * FROM pk_int WHERE c0 IN (3, 4);
 c0
----
  3
  4
(2 rows)

SELECT * FROM pk_int WHERE c0 NOT IN (3, 4);
 c0
----
  1
  2
(2 rows)

SELECT * FROM pk_int WHERE c0 < ANY(ARRAY[3, 4]);
 c0
----
  1
  2
  3
(3 rows)

SELECT * FROM pk_int WHERE c0 <= ANY(ARRAY[3, 4]);
 c0
----
  1
  2
  3
  4
(4 rows)

SELECT * FROM pk_int WHERE c0 = ANY(ARRAY[3, 4]);
 c0
----
  3
  4
(2 rows)

SELECT * FROM pk_int WHERE c0 >= ANY(ARRAY[3, 4]);
 c0
----
  3
  4
(2 rows)

SELECT * FROM pk_int WHERE c0 > ANY(ARRAY[3, 4]);
 c0
----
  4
(1 row)

SELECT * FROM pk_int WHERE c0 < SOME(ARRAY[3, 4]);
 c0
----
  1
  2
  3
(3 rows)

SELECT * FROM pk_int WHERE c0 <= SOME(ARRAY[3, 4]);
 c0
----
  1
  2
  3
  4
(4 rows)

SELECT * FROM pk_int WHERE c0 = SOME(ARRAY[3, 4]);
 c0
----
  3
  4
(2 rows)

SELECT * FROM pk_int WHERE c0 >= SOME(ARRAY[3, 4]);
 c0
----
  3
  4
(2 rows)

SELECT * FROM pk_int WHERE c0 > SOME(ARRAY[3, 4]);
 c0
----
  4
(1 row)

SELECT * FROM pk_int WHERE c0 < ALL(ARRAY[3, 4]);
 c0
----
  1
  2
(2 rows)

SELECT * FROM pk_int WHERE c0 <= ALL(ARRAY[3, 4]);
 c0
----
  1
  2
  3
(3 rows)

SELECT * FROM pk_int WHERE c0 = ALL(ARRAY[3, 4]);
 c0
----
(0 rows)

SELECT * FROM pk_int WHERE c0 >= ALL(ARRAY[3, 4]);
 c0
----
  4
(1 row)

SELECT * FROM pk_int WHERE c0 > ALL(ARRAY[3, 4]);
 c0
----
(0 rows)

-- test row comparison expressions
CREATE TABLE pk_range_int_asc (r1 INT, r2 INT, r3 INT, v INT, PRIMARY KEY(r1 asc, r2 asc, r3 asc));
INSERT INTO pk_range_int_asc SELECT i/100, (i/10) % 10, i % 10, i FROM generate_series(1, 1000) AS i;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) <= (6,7,8);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=678 loops=1)
   Index Cond: (ROW(r1, r2, r3) <= ROW(6, 7, 8))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) <= (6,7,8) LIMIT 10;
 r1 | r2 | r3 | v  
----+----+----+----
  0 |  0 |  1 |  1
  0 |  0 |  2 |  2
  0 |  0 |  3 |  3
  0 |  0 |  4 |  4
  0 |  0 |  5 |  5
  0 |  0 |  6 |  6
  0 |  0 |  7 |  7
  0 |  0 |  8 |  8
  0 |  0 |  9 |  9
  0 |  1 |  0 | 10
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) <= (6,6,6);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=666 loops=1)
   Index Cond: (ROW(r1, r2, r3) <= ROW(6, 6, 6))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) <= (6,6,6) LIMIT 10;
 r1 | r2 | r3 | v  
----+----+----+----
  0 |  0 |  1 |  1
  0 |  0 |  2 |  2
  0 |  0 |  3 |  3
  0 |  0 |  4 |  4
  0 |  0 |  5 |  5
  0 |  0 |  6 |  6
  0 |  0 |  7 |  7
  0 |  0 |  8 |  8
  0 |  0 |  9 |  9
  0 |  1 |  0 | 10
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) <= (8,8,3);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=883 loops=1)
   Index Cond: (ROW(r1, r2, r3) <= ROW(8, 8, 3))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) <= (8,8,3) LIMIT 10;
 r1 | r2 | r3 | v  
----+----+----+----
  0 |  0 |  1 |  1
  0 |  0 |  2 |  2
  0 |  0 |  3 |  3
  0 |  0 |  4 |  4
  0 |  0 |  5 |  5
  0 |  0 |  6 |  6
  0 |  0 |  7 |  7
  0 |  0 |  8 |  8
  0 |  0 |  9 |  9
  0 |  1 |  0 | 10
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (8,8,3);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=118 loops=1)
   Index Cond: (ROW(r1, r2, r3) >= ROW(8, 8, 3))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (8,8,3) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  8 |  8 |  3 | 883
  8 |  8 |  4 | 884
  8 |  8 |  5 | 885
  8 |  8 |  6 | 886
  8 |  8 |  7 | 887
  8 |  8 |  8 | 888
  8 |  8 |  9 | 889
  8 |  9 |  0 | 890
  8 |  9 |  1 | 891
  8 |  9 |  2 | 892
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (1,4,5) AND (r1, r2, r3) <= (7,4,5);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=601 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(1, 4, 5)) AND (ROW(r1, r2, r3) <= ROW(7, 4, 5)))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (1,4,5) AND (r1, r2, r3) <= (7,4,5) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  1 |  4 |  5 | 145
  1 |  4 |  6 | 146
  1 |  4 |  7 | 147
  1 |  4 |  8 | 148
  1 |  4 |  9 | 149
  1 |  5 |  0 | 150
  1 |  5 |  1 | 151
  1 |  5 |  2 | 152
  1 |  5 |  3 | 153
  1 |  5 |  4 | 154
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (1,4,5) AND (r1, r2, r3) <= (1,6,5) AND r3 IN (5,2,6);
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=7 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(1, 4, 5)) AND (ROW(r1, r2, r3) <= ROW(1, 6, 5)) AND (r3 = ANY ('{5,2,6}'::integer[])))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (1,4,5) AND (r1, r2, r3) <= (1,6,5) AND r3 IN (5,2,6) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  1 |  4 |  5 | 145
  1 |  4 |  6 | 146
  1 |  5 |  2 | 152
  1 |  5 |  5 | 155
  1 |  5 |  6 | 156
  1 |  6 |  2 | 162
  1 |  6 |  5 | 165
(7 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (1,4,5) AND (r1, r2, r3) <= (1,6,5) ORDER BY r1 DESC, r2 DESC, r3 DESC;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Index Scan Backward using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=21 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(1, 4, 5)) AND (ROW(r1, r2, r3) <= ROW(1, 6, 5)))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) >= (1,4,5) AND (r1, r2, r3) <= (1,6,5) ORDER BY r1 DESC, r2 DESC, r3 DESC LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  1 |  6 |  5 | 165
  1 |  6 |  4 | 164
  1 |  6 |  3 | 163
  1 |  6 |  2 | 162
  1 |  6 |  1 | 161
  1 |  6 |  0 | 160
  1 |  5 |  9 | 159
  1 |  5 |  8 | 158
  1 |  5 |  7 | 157
  1 |  5 |  6 | 156
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) = (1,6,5);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Index Scan using pk_range_int_asc_pkey on pk_range_int_asc (actual rows=1 loops=1)
   Index Cond: ((r1 = 1) AND (r2 = 6) AND (r3 = 5))
(2 rows)

SELECT * FROM pk_range_int_asc WHERE (r1, r2, r3) = (1,6,5) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  1 |  6 |  5 | 165
(1 row)

DROP TABLE pk_range_int_asc;
CREATE TABLE pk_range_asc_desc_asc (r1 BIGINT, r2 INT, r3 INT, v INT, PRIMARY KEY(r1 asc, r2 desc, r3 asc));
INSERT INTO pk_range_asc_desc_asc SELECT i/100, (i/10) % 10, i % 10, i FROM generate_series(1, 1000) AS i;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) <= (6,7,8);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Index Scan using pk_range_asc_desc_asc_pkey on pk_range_asc_desc_asc (actual rows=678 loops=1)
   Index Cond: (ROW(r1, r2, r3) <= ROW(6, 7, 8))
   Rows Removed by Index Recheck: 21
(3 rows)

SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) <= (6,7,8) LIMIT 10;
 r1 | r2 | r3 | v  
----+----+----+----
  0 |  9 |  0 | 90
  0 |  9 |  1 | 91
  0 |  9 |  2 | 92
  0 |  9 |  3 | 93
  0 |  9 |  4 | 94
  0 |  9 |  5 | 95
  0 |  9 |  6 | 96
  0 |  9 |  7 | 97
  0 |  9 |  8 | 98
  0 |  9 |  9 | 99
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) >= (8,7,3);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Index Scan using pk_range_asc_desc_asc_pkey on pk_range_asc_desc_asc (actual rows=128 loops=1)
   Index Cond: (ROW(r1, r2, r3) >= ROW(8, 7, 3))
   Rows Removed by Index Recheck: 73
(3 rows)

SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) >= (8,7,3) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  8 |  9 |  0 | 890
  8 |  9 |  1 | 891
  8 |  9 |  2 | 892
  8 |  9 |  3 | 893
  8 |  9 |  4 | 894
  8 |  9 |  5 | 895
  8 |  9 |  6 | 896
  8 |  9 |  7 | 897
  8 |  9 |  8 | 898
  8 |  9 |  9 | 899
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Index Scan using pk_range_asc_desc_asc_pkey on pk_range_asc_desc_asc (actual rows=85 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(8, 7, 3)) AND (ROW(r1, r2, r3) <= ROW(9, 5, 7)))
   Rows Removed by Index Recheck: 115
(3 rows)

SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  8 |  9 |  0 | 890
  8 |  9 |  1 | 891
  8 |  9 |  2 | 892
  8 |  9 |  3 | 893
  8 |  9 |  4 | 894
  8 |  9 |  5 | 895
  8 |  9 |  6 | 896
  8 |  9 |  7 | 897
  8 |  9 |  8 | 898
  8 |  9 |  9 | 899
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7) ORDER BY r1 DESC, r2 ASC, r3 DESC;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Index Scan Backward using pk_range_asc_desc_asc_pkey on pk_range_asc_desc_asc (actual rows=85 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(8, 7, 3)) AND (ROW(r1, r2, r3) <= ROW(9, 5, 7)))
   Rows Removed by Index Recheck: 115
(3 rows)

SELECT * FROM pk_range_asc_desc_asc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7) ORDER BY r1 DESC, r2 ASC, r3 DESC LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  9 |  0 |  9 | 909
  9 |  0 |  8 | 908
  9 |  0 |  7 | 907
  9 |  0 |  6 | 906
  9 |  0 |  5 | 905
  9 |  0 |  4 | 904
  9 |  0 |  3 | 903
  9 |  0 |  2 | 902
  9 |  0 |  1 | 901
  9 |  0 |  0 | 900
(10 rows)

DROP TABLE pk_range_asc_desc_asc;
CREATE TABLE pk_range_desc_asc_desc (r1 BIGINT, r2 INT, r3 INT, v INT, PRIMARY KEY(r1 desc, r2 asc, r3 desc));
INSERT INTO pk_range_desc_asc_desc SELECT i/100, (i/10) % 10, i % 10, i FROM generate_series(1, 1000) AS i;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) <= (6,7,8);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using pk_range_desc_asc_desc_pkey on pk_range_desc_asc_desc (actual rows=678 loops=1)
   Index Cond: (ROW(r1, r2, r3) <= ROW(6, 7, 8))
   Rows Removed by Index Recheck: 21
(3 rows)

SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) <= (6,7,8) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  6 |  0 |  9 | 609
  6 |  0 |  8 | 608
  6 |  0 |  7 | 607
  6 |  0 |  6 | 606
  6 |  0 |  5 | 605
  6 |  0 |  4 | 604
  6 |  0 |  3 | 603
  6 |  0 |  2 | 602
  6 |  0 |  1 | 601
  6 |  0 |  0 | 600
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) >= (8,7,3);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using pk_range_desc_asc_desc_pkey on pk_range_desc_asc_desc (actual rows=128 loops=1)
   Index Cond: (ROW(r1, r2, r3) >= ROW(8, 7, 3))
   Rows Removed by Index Recheck: 73
(3 rows)

SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) >= (8,7,3) LIMIT 10;
 r1 | r2 | r3 |  v   
----+----+----+------
 10 |  0 |  0 | 1000
  9 |  0 |  9 |  909
  9 |  0 |  8 |  908
  9 |  0 |  7 |  907
  9 |  0 |  6 |  906
  9 |  0 |  5 |  905
  9 |  0 |  4 |  904
  9 |  0 |  3 |  903
  9 |  0 |  2 |  902
  9 |  0 |  1 |  901
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Index Scan using pk_range_desc_asc_desc_pkey on pk_range_desc_asc_desc (actual rows=85 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(8, 7, 3)) AND (ROW(r1, r2, r3) <= ROW(9, 5, 7)))
   Rows Removed by Index Recheck: 115
(3 rows)

SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7) LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  9 |  0 |  9 | 909
  9 |  0 |  8 | 908
  9 |  0 |  7 | 907
  9 |  0 |  6 | 906
  9 |  0 |  5 | 905
  9 |  0 |  4 | 904
  9 |  0 |  3 | 903
  9 |  0 |  2 | 902
  9 |  0 |  1 | 901
  9 |  0 |  0 | 900
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7) ORDER BY r1 DESC, r2 ASC, r3 DESC;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Index Scan using pk_range_desc_asc_desc_pkey on pk_range_desc_asc_desc (actual rows=85 loops=1)
   Index Cond: ((ROW(r1, r2, r3) >= ROW(8, 7, 3)) AND (ROW(r1, r2, r3) <= ROW(9, 5, 7)))
   Rows Removed by Index Recheck: 115
(3 rows)

SELECT * FROM pk_range_desc_asc_desc WHERE (r1, r2, r3) >= (8,7,3) AND (r1, r2, r3) <= (9,5,7) ORDER BY r1 DESC, r2 ASC, r3 DESC LIMIT 10;
 r1 | r2 | r3 |  v  
----+----+----+-----
  9 |  0 |  9 | 909
  9 |  0 |  8 | 908
  9 |  0 |  7 | 907
  9 |  0 |  6 | 906
  9 |  0 |  5 | 905
  9 |  0 |  4 | 904
  9 |  0 |  3 | 903
  9 |  0 |  2 | 902
  9 |  0 |  1 | 901
  9 |  0 |  0 | 900
(10 rows)

DROP TABLE pk_range_desc_asc_desc;